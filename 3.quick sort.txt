Consider a student database of SEIT class. Database contains different fields of every student like Roll No, Name and SGPA. 
Arrange list of students to find out first ten toppers from a class. (Use Quick sort) 

#include <iostream>
#include <string>
using namespace std;

struct Student {
    int rollNo;
    string name;
    float sgpa;
};

void swap(Student* a, Student* b) {
    Student temp = *a;
    *a = *b;
    *b = temp;
}

int partition(Student arr[], int low, int high) {
    float pivot = arr[high].sgpa;
    int i = (low - 1);

    for (int j = low; j <= high - 1; j++) {
        if (arr[j].sgpa > pivot) { // Sorting in descending order
            i++;
            swap(&arr[i], &arr[j]);
        }
    }
    swap(&arr[i + 1], &arr[high]);
    return (i + 1);
}

void quickSort(Student arr[], int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}

void printTopStudents(Student arr[], int n, int topN) {
    for (int i = 0; i < topN && i < n; i++) {
        cout << "Roll No: " << arr[i].rollNo << ", Name: " << arr[i].name << ", SGPA: " << arr[i].sgpa << endl;
    }
}

int main() {
    int n;
    cout << "Enter the number of students: ";
    cin >> n;
    Student students[n];

    for (int i = 0; i < n; i++) {
        cout << "Enter details for student " << i + 1 << ":" << endl;
        cout << "Roll No: ";
        cin >> students[i].rollNo;
        cout << "Name: ";
        cin >> students[i].name;
        cout << "SGPA: ";
        cin >> students[i].sgpa;
    }

    quickSort(students, 0, n - 1);

    cout << "\nTop 10 students according to SGPA:" << endl;
    printTopStudents(students, n, 10);

    return 0;
}
