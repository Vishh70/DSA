Represent a graph of your college campus using adjacency list /adjacency matrix. Nodes should represent the various departments/institutes and links should represent the distance between them. Find minimum spanning tree using 
a) Using Kruskalâ€™s algorithm. 



#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

struct Edge {
    int src, dest, weight;
};

int find(int parent[], int i) {
    if (parent[i] == -1)
        return i;
    return find(parent, parent[i]);
}

void Union(int parent[], int x, int y) {
    int xroot = find(parent, x);
    int yroot = find(parent, y);
    parent[xroot] = yroot;
}

void Kruskal(int V, vector<Edge>& edges) {
    sort(edges.begin(), edges.end(), [](Edge a, Edge b) {
        return a.weight < b.weight;
    });

    int parent[V];
    fill_n(parent, V, -1);

    vector<Edge> mst;

    for (Edge edge : edges) {
        int x = find(parent, edge.src);
        int y = find(parent, edge.dest);

        if (x != y) {
            mst.push_back(edge);
            Union(parent, x, y);
        }
    }

    cout << "Minimum Spanning Tree:" << endl;
    for (Edge edge : mst) {
        cout << "Department " << edge.src << " - Department " << edge.dest
             << " with distance " << edge.weight << endl;
    }
}

int main() {
    vector<Edge> edges = {
        {0, 1, 5}, {0, 2, 10}, {1, 3, 8}, {2, 4, 7},
        {3, 4, 6}, {1, 2, 3}
    };

    int V = 5;
    Kruskal(V, edges);

    return 0;
}