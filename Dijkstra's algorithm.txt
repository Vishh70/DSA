Represent a graph of city using adjacency matrix /adjacency list. Nodes should represent the various landmarks and links should represent the distance between them. Find the shortest path using Dijkstra's algorithm from single source to all destination. 

#include <iostream>
#include <vector>
#include <climits>

using namespace std;

int minDistance(const vector<int>& dist, const vector<bool>& visited, int V) {
    int min = INT_MAX, min_index = -1;
    for (int v = 0; v < V; v++) {
        if (!visited[v] && dist[v] <= min) {
            min = dist[v];
            min_index = v;
        }
    }
    return min_index;
}

void dijkstra(const vector<vector<int>>& graph, int src, int V) {
    if (V == 0) {
        cout << "Graph is empty." << endl;
        return;
    }

    vector<int> dist(V, INT_MAX);
    vector<bool> visited(V, false);
    dist[src] = 0;

    for (int count = 0; count < V - 1; count++) {
        int u = minDistance(dist, visited, V);
        if (u == -1) break; // No more reachable vertices
        visited[u] = true;

        for (int v = 0; v < V; v++) {
            if (!visited[v] && graph[u][v] != 0 && dist[u] != INT_MAX && dist[u] + graph[u][v] < dist[v]) {
                dist[v] = dist[u] + graph[u][v];
            }
        }
    }

    cout << "Vertex \t Distance from Source" << endl;
    for (int i = 0; i < V; i++) {
        if (dist[i] == INT_MAX) {
            cout << i << " \t INF" << endl;
        } else {
            cout << i << " \t " << dist[i] << endl;
        }
    }
}

int main() {
    int V = 5;
    vector<vector<int>> graph = {
        {0, 10, 0, 0, 0},
        {10, 0, 5, 0, 0},
        {0, 5, 0, 2, 1},
        {0, 0, 2, 0, 3},
        {0, 0, 1, 3, 0}
    };
    
    dijkstra(graph, 0, V);
    
    return 0;
}
